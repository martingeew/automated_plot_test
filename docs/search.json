[
  {
    "objectID": "stock_report.html",
    "href": "stock_report.html",
    "title": "Top Tech Stocks Report",
    "section": "",
    "text": "Author: Martin Wong @ Autonomous Econ This is a demo site built using Quarto and Python. Check outthe full Substack post here.\n\n\nCode\nfrom datetime import datetime\n\n# Display last update time\ncurrent_time = datetime.now().strftime(\"%d-%m-%Y %H:%M\")\nprint(f\"Last updated: {current_time}\")\n\n\nLast updated: 25-03-2025 21:49\n\n\n\n\nCode\nimport ffn\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n\n# Function for generating the plot\ndef plot_stock_timeseries(df):\n    \"\"\"\n    Plots all columns from the DataFrame in a single chart using Matplotlib,\n    with a dark theme, no axis labels, horizontal grid lines, and no spines\n    on the left, right, and top.\n\n    Parameters:\n    df (pd.DataFrame): DataFrame with float columns and DatetimeIndex as index.\n    \"\"\"\n    # Create figure and axis\n    fig, ax = plt.subplots(\n        figsize=(10, 7)\n    )  # Setting width to 900px and height to 600px equivalent in inches\n\n    # Set dark background\n    fig.patch.set_facecolor(\"#282a36\")  # Background color for the figure\n    ax.set_facecolor(\"#282a36\")  # Background color for the plot area\n\n    # Plot each column with a line\n    for col in df.columns:\n        ax.plot(df.index, df[col], label=col, linewidth=2)\n\n    # Remove axis labels\n    ax.set_xlabel(\"\")  # No x-axis label\n    ax.set_ylabel(\"\")  # No y-axis label\n\n    # Customize grid lines\n    ax.grid(\n        True, which=\"both\", axis=\"both\", color=\"white\", alpha=0.2, linewidth=1.3\n    )  # Light gray grid lines\n\n    # Set title and legend\n    ax.set_title(\n        \"Top tech stocks indexed to 2023-01-01=100\\n\",\n        fontsize=20,\n        color=\"white\",\n        loc=\"left\",\n    )  # Title with large font\n    legend = ax.legend(\n        fontsize=16,\n        loc=\"upper left\",\n        frameon=True,  # Enable the frame (legend box)\n        labelcolor=\"white\",  # White legend text\n        facecolor=\"#282a36\",  # Set background color of the legend box (matching dark theme)\n        framealpha=1,  # Set frame alpha to 1 for a solid fill (no transparency)\n    )\n\n    # Customize ticks\n    ax.tick_params(\n        axis=\"both\", colors=\"white\", labelsize=14\n    )  # White ticks for both axes\n\n    # Set y-axis limits (applies to both left and right since it's mirrored)\n    ax.set_ylim(0, 1250)\n\n    ax.tick_params(axis=\"y\", which=\"both\", labelright=True, right=True)\n\n    # Remove the left, right, and top spines\n    ax.spines[\"left\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"bottom\"].set_color(\"white\")\n\n    # Adjust layout\n    plt.tight_layout()\n\n    # Return the figure and axis\n    return fig, ax\n\n\n# Step 1: Retrieve data using ffn\n#data = ffn.get(\"nvda,msft,googl,amzn,aapl,meta\", start=\"2023-01-01\")\n\ndata = pd.read_csv(\n    \"data/stock_data_2025-03-25_07-23-39.csv\", index_col=0, parse_dates=True\n)\n\n# Step 2: Rebase data\ndata_rebase = data.rebase()\n\n# Step 3: Generate plot\nfig, ax = plot_stock_timeseries(data_rebase)\n\n\n\n\n\n\n\n\nFigureÂ 1"
  }
]